terraform {
  required_version = ">= 1.5.0"
  required_providers {
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = ">= 2.11.0"
    }
    helm = {
      source  = "hashicorp/helm"
      version = ">= 2.7.1"
    }
    aws = {
      source  = "hashicorp/aws"
      version = ">= 5.0.0"
    }
  }
  backend "s3" {}
}

data "aws_eks_cluster_auth" "cluster" {
  name = var.cluster_name
}

provider "kubernetes" {
  host                   = var.cluster_endpoint
  cluster_ca_certificate = base64decode(var.cluster_ca_certificate)
  token                  = data.aws_eks_cluster_auth.cluster.token
}

provider "helm" {
  kubernetes {
    host                   = var.cluster_endpoint
    cluster_ca_certificate = base64decode(var.cluster_ca_certificate)
    token                  = data.aws_eks_cluster_auth.cluster.token
  }
}

# Create Kubernetes namespace for GitLab Runner
resource "kubernetes_namespace" "gitlab_runner" {
  metadata {
    name = var.namespace
  }
}

# Create Service Account for GitLab Runner
resource "kubernetes_service_account" "gitlab_runner" {
  metadata {
    name      = "gitlab-runner"
    namespace = kubernetes_namespace.gitlab_runner.metadata[0].name
  }
}

# Create Role for GitLab Runner
resource "kubernetes_role" "gitlab_runner_role" {
  metadata {
    name      = "gitlab-runner-role"
    namespace = kubernetes_namespace.gitlab_runner.metadata[0].name
  }

  # Permissions for core resources
  rule {
    api_groups = [""]
    resources  = ["secrets", "pods", "pods/exec", "configmaps", "services"]
    verbs      = ["get", "list", "create", "delete", "watch", "update", "patch"]
  }

  # Permissions for apps resources
  rule {
    api_groups = ["apps"]
    resources  = ["deployments"]
    verbs      = ["get", "list", "create", "delete", "watch", "update", "patch"]
  }
  rule {
    api_groups = ["batch"]
    resources  = ["jobs"]
    verbs      = ["get", "list", "create", "delete", "watch"]
  }
}

# Bind Role to Service Account
resource "kubernetes_role_binding" "gitlab_runner_binding" {
  metadata {
    name      = "gitlab-runner-rolebinding"
    namespace = kubernetes_namespace.gitlab_runner.metadata[0].name
  }

  role_ref {
    api_group = "rbac.authorization.k8s.io"
    kind      = "Role"
    name      = kubernetes_role.gitlab_runner_role.metadata[0].name
  }

  subject {
    kind      = "ServiceAccount"
    name      = kubernetes_service_account.gitlab_runner.metadata[0].name
    namespace = kubernetes_namespace.gitlab_runner.metadata[0].name
  }
}

# Create the values.yaml for GitLab Runner Helm release
resource "local_file" "runners_config" {
  content  = templatefile("${path.module}/runners.config.tmpl", {
    gitlab_url         = var.gitlab_url
    registration_token = var.registration_token
    namespace          = var.namespace
    runners_name       = var.runners_name
  })
  filename = "${path.module}/runners.config"
}

# Create the GitLab Runner secret
resource "kubernetes_secret" "gitlab_runner" {
  metadata {
    name      = "gitlab-runner"
    namespace = kubernetes_namespace.gitlab_runner.metadata[0].name
  }

  data = {
    "runner-registration-token" = var.registration_token
    "runner-token"             = ""  # This will be populated by GitLab after registration
  }
}
# Deploy GitLab Runner using Helm
resource "helm_release" "gitlab_runner" {
  name             = var.runner_release_name
  repository       = "https://charts.gitlab.io"
  chart            = "gitlab-runner"
  version          = var.chart_version
  namespace        = kubernetes_namespace.gitlab_runner.metadata[0].name
  create_namespace = true

  #values = [local_file.runners_config.filename]
  values = [local_file.runners_config.content]

  set {
    name  = "gitlabUrl"
    value = var.gitlab_url
  }

  set_sensitive {
    name  = "runnerRegistrationToken"
    value = var.registration_token
  }

  set {
    name  = "runners.kubernetes.namespace"
    value = var.namespace
  }

  set {
    name  = "runners.kubernetes.serviceAccount"
    value = "gitlab-runner"
  }

  # Enable Helm chart-managed RBAC
  set {
    name  = "rbac.create"
    value = "true"
  }

  set {
    name  = "rbac.serviceAccountName"
    value = kubernetes_service_account.gitlab_runner.metadata[0].name
  }
  dynamic "set" {
    for_each = var.additional_helm_values
    content {
      name  = set.key
      value = set.value
    }
  }
  depends_on = [
    kubernetes_namespace.gitlab_runner,
    kubernetes_secret.gitlab_runner
  ]
}

# resource "kubernetes_config_map" "aws_logging" {
#   metadata {
#     name      = "aws-logging"
#     namespace = kubernetes_namespace.gitlab_runner.metadata[0].name
#   }

#   data = {
#     "output.conf" = <<EOF
# [OUTPUT]
#     Name cloudwatch_logs
#     Match *
#     region ${data.aws_region.current.name}
#     log_group_name /aws/eks/${var.cluster_name}/pods
#     log_stream_prefix fargate-
#     auto_create_group true
# EOF
#   }
# }

# Helm Release for GitLab Runner
# resource "helm_release" "gitlab_runner" {
#   name             = var.runner_release_name
#   repository       = "https://charts.gitlab.io"
#   chart            = "gitlab-runner"
#   version          = var.chart_version
#   namespace        = var.namespace
#   create_namespace = true

  # set {
  #   name  = "gitlabUrl"
  #   value = var.gitlab_url
  # }

  # set_sensitive {
  #   name  = "runnerRegistrationToken"
  #   value = var.registration_token
  # }

  # set {
  #   name  = "runners.kubernetes.namespace"
  #   value = var.namespace
  # }

  # set {
  #   name  = "runners.kubernetes.serviceAccount"
  #   value = "gitlab-runner"
  # }

  # # Enable Helm chart-managed RBAC
  # set {
  #   name  = "rbac.create"
  #   value = "true"
  # }

  # set {
  #   name  = "rbac.serviceAccountName"
  #   value = kubernetes_service_account.gitlab_runner.metadata[0].name
  # }

#   set {
#     name  = "runners.config"
#     value = <<-EOT
# concurrent = 5
# check_interval = 0

# [[runners]]
#   name = "nonprod-runner"
#   executor = "kubernetes"
#   kubernetes_namespace = "${var.namespace}"
#   kubernetes_service_account = "gitlab-runner"
#   tags = ["fargate"]
#   [runners.kubernetes]
#     image = "alpine:latest"
#     poll_timeout = 600
# EOT
#   }

#   dynamic "set" {
#     for_each = var.additional_helm_values
#     content {
#       name  = set.key
#       value = set.value
#     }
#   }
# }